---
# irods/tasks/main.yml

- name: Make downloads directory
  file:
    path: "{{ dl_dir }}"
    state: directory

- name: Install prerequisites
  apt:
    name={{ item }}
    update_cache=yes
    cache_valid_time=3600
    state=installed
  with_items: "{{ prereq_packages }}"

- name: Create iRODS users
  user:
    name: "{{ item.username }}"
    password: "{{ item.password | password_hash('sha512') }}"
  with_items:
    - username: "{{ config_irods_users_primary_username }}"
      password: "{{ config_irods_users_primary_password }}"
    - username: "{{ config_irods_users_admin_username }}"
      password: "{{ config_irods_users_admin_password }}"

- name: Enable and start prerequisite services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items: "{{ prereq_enable_services }}"

- name: Download install packages
  get_url:
    src: "{{ item.src }}"
    checksum: "{{ item.cksum }}"
    dest: "{{ item.dest }}/{{ item.creates }}"
  with_items: "{{ downloads.irods }}"
  ignore_errors: true
  register: get_url_status

- name: Install wget, if download failed
  apt:
     name="wget"
     update_cache=yes
     cache_valid_time=3600
     state=installed
  when: get_url_status.changed == false

- name: wget iRODS package, if download failed
  command: wget -N {{ item.src }} -P {{ item.dest }}
  with_items: "{{ downloads.irods }}"
  when: get_url_status.changed == false
  tags:
  - skip_ansible_lint #may require wget due to a bug with get_url

- name: Install iRODS
  apt:
    deb: "{{ item.dest }}/{{ item.creates }}"
    state: installed
  with_items: "{{ downloads.irods }}"

- name: Clone Cyverse iRODS repos
  git:
    repo: "{{ item.value.src }}"
    dest: "{{ dl_dir }}/{{ item.value.src | basename }}"
    version: master
  with_dict: "{{ irods_repos }}"

- name: Create required directories
  file:
    path: "{{ item.value.dest|dirname }}"
    state: directory
  when: item.value.dest != ""
  with_dict: "{{ irods_repos }}"

- name: Install repos
  command: "cp -r {{ dl_dir }}/{{ item.value.src | basename }} {{ item.value.dest }}"
  when: item.value.dest != ""
  args:
    creates: "{{ item.value.dest }}"
  with_dict: "{{ irods_repos }}"

- name: Install Cyverse command scripts
  command: "cp -r {{ dl_dir }}/irods-cmd-scripts/{{ item }} {{ config_irods_path }}/iRODS/server/bin/cmd/{{ item }}"
  args:
    creates: "{{ config_irods_path }}/iRODS/server/bin/cmd/{{ item }}"
  with_items:
    - "amqptopicsend.py"
    - "generateuuid.sh"

- name: Add iRODS database
  become_user: postgres
  postgresql_db:
    name: "{{ config_database_name }}"

- name: Add iRODS primary user to postgres
  become_user: postgres
  postgresql_user:
    db: "{{ config_database_name }}"
    priv: ALL
    name: "{{ config_irods_users_primary_username }}"
    password: "{{ config_irods_users_primary_password }}"

- name: Copy iRODS rules
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
    - src: reConfigs/ipc-amqp.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-amqp.re"
      mode: "u=rw,g=r,o=r"
    - src: reConfigs/ipc-custom.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-custom.re"
      mode: "u=rw,g=r,o=r"
    - src: reConfigs/ipc-env.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-env.re"
      mode: "u=rw,g=r,o=r"
    - src: reConfigs/ipc-json.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-json.re"
      mode: "u=rw,g=r,o=r"
    - src: reConfigs/ipc-logic.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-logic.re"
      mode: "u=rw,g=r,o=r"
    - src: reConfigs/ipc-uuid.re.j2
      dest: "{{ config_irods_path }}/iRODS/server/config/reConfigs/ipc-uuid.re"
      mode: "u=rw,g=r,o=r"
    - src: setup_icommands.j2
      dest: "{{ dl_dir }}/setup_icommands"
      mode: "u=rw,g=r,o=r"
    - src: setup_irods.j2
      dest: "{{ dl_dir }}/setup_irods"
      mode: "u=rw,g=r,o=r"

- name: Configure iRODS service
  shell: "{{ config_irods_path }}/packaging/setup_irods.sh < {{ dl_dir }}/setup_irods"
  register: irods_config
  ignore_errors: true

  #For some reason, the db_password is always configured to "testpassword", so this task can manually fix it
- name: Fix /etc/irods/database_config.json
  replace: "dest=/etc/irods/database_config.json regexp='testpassword' replace='    \"db_password\": \"{{ config_irods_users_primary_password }}\",' backup=yes"

- name: Modify configuration file
  shell: "sed '1,2d' {{ dl_dir }}/setup_irods > {{ dl_dir }}/setup_irods_mod"
  #if irods_config fails, a comment saying "must be exactly 32 bytes" is printed, so key off of the word "exactly"
  when: irods_config.stdout.find("exactly") != -1

- name: Re-configure iRODS service
  shell: "{{ config_irods_path }}/packaging/setup_irods.sh < {{ dl_dir }}/setup_irods_mod"
  register: irods_reconfig
  ignore_errors: true
  when: irods_config.stdout.find("exactly") != -1

- name: Configure iCommands for administration
  become_user: "{{ config_irods_users_admin_username }}"
  shell: "iinit < {{ dl_dir }}/setup_icommands"
  ignore_errors: true
